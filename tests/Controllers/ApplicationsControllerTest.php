<?php
/*
 * APIBuzonesLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

namespace APIBuzonesLib\Tests;

use APIBuzonesLib\APIException;
use APIBuzonesLib\Exceptions;
use APIBuzonesLib\APIHelper;
use APIBuzonesLib\Models;

class ApplicationsControllerTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var \APIBuzonesLib\Controllers\ApplicationsController Controller instance
     */
    protected static $controller;

    /**
     * @var HttpCallBackCatcher Callback
     */
    protected $httpResponse;

    /**
     * Setup test class
     */
    public static function setUpBeforeClass()
    {
        $client = new \APIBuzonesLib\APIBuzonesClient();
        self::$controller = $client->getApplications();
    }

    /**
     * Setup test
     */
    protected function setUp()
    {
        $this->httpResponse = new HttpCallBackCatcher();
    }

    /**
     * Crea un nuevo mensaje en los buzones de los usuarios(group) de la aplicaciÃ³n (iris2).
     */
    public function testCrearUnMensajeAAplicaciN1()
    {
        // Parameters for the API call
        $token = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE1MTc5Mzk5NDd9.-pLDemUYmYPpjG5CZ7VI7UUBcC8mC_KAbEyNpzHsTMw';
        $body = TestHelper::getJsonMapper()->mapClass(json_decode(
            '\n{\n\n  "leido": false,\n\n  "borrado": false,\n\n  "data":{\n\n    "type" : "recogidas_pendientes"' .
            ',\n\n    "numero" : 7\n\n  }\n\n}'),
            'APIBuzonesLib\\Models\\CrearUnMensajeAAplicaciNRequest'
        );
        $contentType = 'application/json';

        // Set callback and perform API call
        $result = null;
        self::$controller->setHttpCallBack($this->httpResponse);
        try {
            $result = self::$controller->createApplicationsIris2MessagesPost($token, $body, $contentType);
        } catch (APIException $e) {
        }

        // Test response code
        $this->assertEquals(
            200,
            $this->httpResponse->getResponse()->getStatusCode(),
            "Status is not 200"
        );

        // Test whether the captured response is as we expected
        $this->assertNotNull($result, "Result does not exist");

        $this->assertEquals(
            '\n{\n\n\n"data":\n\n        {\n\n            "id": "123456",\n\n            "leido": false,\n\n     ' .
                '       "borrado": false,\n\n            "fecha": "2017-10-20T15:59:45.000Z",\n\n            "data": ' .
                '{\n\n                "type": "incidencias_pregunta",\n\n                "referencia": "123456789"\n\' .
                'n            }\n\n        }\n\n}\n',
            $this->httpResponse->getResponse()->getRawBody(),
            "Response body does not match exactly"
        );
    }

    /**
     * Devuelve todas las aplicaciones que tienen mensajes.
     */
    public function testLeerAplicaciones1()
    {
        // Parameters for the API call
        $token = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE1MTY4NzUwMDN9.2Eo8_bhTyLVywxi4P2zTSQ86WLXwCMdneJdmygeClaw';

        // Set callback and perform API call
        $result = null;
        self::$controller->setHttpCallBack($this->httpResponse);
        try {
            $result = self::$controller->getApplicationsGet($token);
        } catch (APIException $e) {
        }

        // Test response code
        $this->assertEquals(
            200,
            $this->httpResponse->getResponse()->getStatusCode(),
            "Status is not 200"
        );

        // Test whether the captured response is as we expected
        $this->assertNotNull($result, "Result does not exist");

        $this->assertEquals(
            '\n{\n\n    "data":    [\n\n        {"id":"iris2", "id":"portal"}    \n\n    ]\n\n}',
            $this->httpResponse->getResponse()->getRawBody(),
            "Response body does not match exactly"
        );
    }
}
