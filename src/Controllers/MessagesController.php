<?php
/*
 * APIBuzonesLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

namespace APIBuzonesLib\Controllers;

use APIBuzonesLib\APIException;
use APIBuzonesLib\APIHelper;
use APIBuzonesLib\Configuration;
use APIBuzonesLib\Models;
use APIBuzonesLib\Exceptions;
use APIBuzonesLib\Utils\DateTimeHelper;
use APIBuzonesLib\Http\HttpRequest;
use APIBuzonesLib\Http\HttpResponse;
use APIBuzonesLib\Http\HttpMethod;
use APIBuzonesLib\Http\HttpContext;
use Unirest\Request;

/**
 * @todo Add a general description for this controller.
 */
class MessagesController extends BaseController
{
    /**
     * @var MessagesController The reference to *Singleton* instance of this class
     */
    private static $instance;

    /**
     * Returns the *Singleton* instance of this class.
     * @return MessagesController The *Singleton* instance.
     */
    public static function getInstance()
    {
        if (null === static::$instance) {
            static::$instance = new static();
        }
        
        return static::$instance;
    }

    /**
     * TODO: Add Description
     *
     * @return void response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function getUnnammedEndpointGet()
    {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/';

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::get($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);
    }

    /**
     * Modifica uno o variso de los campos: borrado, leido o consultado.
     *
     * @param string                                       $token        TODO: type description here
     * @param Models\ModificarUnMensajeLeidoBorradoRequest $body         TODO: type description here
     * @param string                                       $contentType  TODO: type description here
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function updateApplicationsIris2BoxesJuandeMcMessages5a0d6278c1371500112e5ddePatch(
        $token,
        $body,
        $contentType
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.
            '/applications/iris2/boxes/juande.mc/messages/5a0d6278c1371500112e5dde';

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'token'        => $token,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json',
            'Content-Type'    => $contentType
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::PATCH, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::patch($_queryUrl, $_headers, Request\Body::Json($body));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'APIBuzonesLib\\Models\\ModificarUnMensajeLeidoBorradoResponse');
    }

    /**
     * Devuelve el mensaje (123456) del buzón (juande.mc) de la aplicación (iris2).
     *
     * @param string $token TODO: type description here
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function getApplicationsIris2BoxesJuandeMcMessages5a0d6278c1371500112e5ddeGet(
        $token
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.
            '/applications/iris2/boxes/juande.mc/messages/5a0d6278c1371500112e5dde';

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'token' => $token,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::get($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'APIBuzonesLib\\Models\\LeerUnMensajeResponse');
    }

    /**
     * Crea un nuevo mensaje en el buzón (juande.mc) de la aplicación (iris2).
     *
     * @param string                       $token        TODO: type description here
     * @param Models\CrearUnMensajeRequest $body         TODO: type description here
     * @param string                       $contentType  TODO: type description here
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function createApplicationsIris2BoxesJUANDEMCMessagesPost(
        $token,
        $body,
        $contentType
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/applications/iris2/boxes/JUANDE.MC/messages';

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'token'        => $token,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json',
            'Content-Type'    => $contentType
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::POST, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::post($_queryUrl, $_headers, Request\Body::Json($body));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'APIBuzonesLib\\Models\\CrearUnMensajeResponse');
    }

    /**
     * 
     * Devuelve todos los mensajes del buzón (juande.mc) de la aplicación (iris2). Acepta parametros en la
     * url:
     *
     *
     * borrado: true/false
     *
     *
     * leido: true/false
     *
     *
     * fecha: mensajes desde esa fecha (ej.-2017-01-21)
     *
     *
     * skip: se salta ese número de documentos
     *
     *
     * limit: número documentos máximo que devolverá
     *
     *
     * order: (fecha/-fecha), ordena por ese campo
     *
     * @param bool     $borrado      TODO: type description here
     * @param DateTime $fecha        TODO: type description here
     * @param integer  $limit        TODO: type description here
     * @param integer  $skip         TODO: type description here
     * @param string   $order        TODO: type description here
     * @param string   $token        TODO: type description here
     * @param string   $contentType  TODO: type description here
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function getApplicationsIris2BoxesJUANDEMCMessagesGet(
        $borrado,
        $fecha,
        $limit,
        $skip,
        $order,
        $token,
        $contentType
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/applications/iris2/boxes/JUANDE.MC/messages';

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'borrado'      => var_export($borrado, true),
            'fecha'        => DateTimeHelper::toRfc3339DateTime($fecha),
            'limit'        => $limit,
            'skip'         => $skip,
            'order'        => $order,
            'token'        => $token,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json',
            'Content-Type'    => $contentType
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::get($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'APIBuzonesLib\\Models\\LeerMensajesResponse');
    }
}
