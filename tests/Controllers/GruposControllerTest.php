<?php
/*
 * APIBuzonesLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

namespace APIBuzonesLib\Tests;

use APIBuzonesLib\APIException;
use APIBuzonesLib\Exceptions;
use APIBuzonesLib\APIHelper;
use APIBuzonesLib\Models;
use APIBuzonesLib\Utils\DateTimeHelper;

class GruposControllerTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var \APIBuzonesLib\Controllers\GruposController Controller instance
     */
    protected static $controller;

    /**
     * @var HttpCallBackCatcher Callback
     */
    protected $httpResponse;

    /**
     * Setup test class
     */
    public static function setUpBeforeClass()
    {
        $client = new \APIBuzonesLib\APIBuzonesClient();
        self::$controller = $client->getGrupos();
    }

    /**
     * Setup test
     */
    protected function setUp()
    {
        $this->httpResponse = new HttpCallBackCatcher();
    }

    /**
     * Crea un nuevo mensaje en los buzones de los usuarios(group) de la aplicación (iris2).
     */
    public function testCrearUnMensajeAlGrupoPorNombre1()
    {
        // Parameters for the API call
        $token = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE1MTM2MTI1OTAsInN0ciI6InN0ciIsImludCI6MSwiaXNzIjoicmVkeXNlci5jb20iLCJib29sIjp0cnVlfQ.f3t0DAv5eqd47UBsnQ3e4AZvnup9vSlvZB-iBjvegIo';
        $body = TestHelper::getJsonMapper()->mapClass(json_decode(
            '\n{\n\n  "leido": false,\n\n  "borrado": false,\n\n  "data":{\n\n    "type" : "recogidas_pendientes"' .
            ',\n\n    "numero" : 7\n\n  }\n\n}'),
            'APIBuzonesLib\\Models\\CrearUnMensajeAlGrupoPorNombreRequest'
        );
        $contentType = 'application/json';

        // Set callback and perform API call
        $result = null;
        self::$controller->setHttpCallBack($this->httpResponse);
        try {
            $result = self::$controller->createGroups5a564715825d4f0e94946c1aApplicationsIris2MessagesPost2($token, $body, $contentType);
        } catch (APIException $e) {
        }

        // Test response code
        $this->assertEquals(
            200,
            $this->httpResponse->getResponse()->getStatusCode(),
            "Status is not 200"
        );

        // Test whether the captured response is as we expected
        $this->assertNotNull($result, "Result does not exist");

        $this->assertEquals(
            '\n{\n\n\n"data":\n\n        {\n\n            "id": "123456",\n\n            "leido": false,\n\n     ' .
                '       "borrado": false,\n\n            "fecha": "2017-10-20T15:59:45.000Z",\n\n            "data": ' .
                '{\n\n                "type": "incidencias_pregunta",\n\n                "referencia": "123456789"\n\' .
                'n            }\n\n        }\n\n}\n',
            $this->httpResponse->getResponse()->getRawBody(),
            "Response body does not match exactly"
        );
    }

    /**
     * Modifica uno o variso de los campos.
     */
    public function testModificarUnGrupoPorNombre1()
    {
        // Parameters for the API call
        $token = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE1MTU2NzUxNTJ9.94eDQR7Rn8sUblFCaGzoEC1XxbS8XGYtFhgGzslrzKU';
        $body = TestHelper::getJsonMapper()->mapClass(json_decode(
            '\n{\n\n    "nombre": "Informática",\n\n    "aplicacion": "iris2",\n\n    "usuarios": [\n\n        "J' .
            'UANDE.MC",\n\n        "SCORDOBA"\n\n    ]\n\n}'),
            'APIBuzonesLib\\Models\\ModificarUnGrupoPorNombreRequest'
        );
        $contentType = 'application/json';

        // Set callback and perform API call
        $result = null;
        self::$controller->setHttpCallBack($this->httpResponse);
        try {
            $result = self::$controller->updateGroupsApplicationsIris2GroupnameTodosPatch($token, $body, $contentType);
        } catch (APIException $e) {
        }

        // Test response code
        $this->assertEquals(
            200,
            $this->httpResponse->getResponse()->getStatusCode(),
            "Status is not 200"
        );

        // Test whether the captured response is as we expected
        $this->assertNotNull($result, "Result does not exist");

        $this->assertEquals(
            '\n{\n\n    "data": {\n\n        "id": "123456",\n\n        "leido": true,\n\n        "borrado": fals' .
                'e,\n\n        "fecha": "2017-10-20T15:59:45.000Z",\n\n        "data": {\n\n            "type": "inci' .
                'dencias_pregunta",\n\n            "referencia": "123456789"\n\n        }\n\n    }\n\n}',
            $this->httpResponse->getResponse()->getRawBody(),
            "Response body does not match exactly"
        );
    }

    /**
     * Devuelve el grupo (123456).
     */
    public function testLeerUnGrupoPorNombre1()
    {
        // Parameters for the API call
        $token = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE1MTU2NzUxNTJ9.94eDQR7Rn8sUblFCaGzoEC1XxbS8XGYtFhgGzslrzKU';

        // Set callback and perform API call
        $result = null;
        self::$controller->setHttpCallBack($this->httpResponse);
        try {
            $result = self::$controller->getGroupsApplicationsIris2GroupnameTodosGet($token);
        } catch (APIException $e) {
        }

        // Test response code
        $this->assertEquals(
            200,
            $this->httpResponse->getResponse()->getStatusCode(),
            "Status is not 200"
        );

        // Test whether the captured response is as we expected
        $this->assertNotNull($result, "Result does not exist");

        $this->assertEquals(
            '\n{\n\n    "data":{\n\n        "id": "123456",\n\n    "leido": false,\n\n    "borrado": false,\n\n  ' .
                '  "fecha": "2017-10-20T15:59:45.000Z",\n\n    "data": {\n\n        "type": "incidencias_pregunta",\n' .
                '\n        "referencia": "123456789"\n\n    }\n\n    }\n\n}',
            $this->httpResponse->getResponse()->getRawBody(),
            "Response body does not match exactly"
        );
    }

    /**
     * Modifica uno o variso de los campos.
     */
    public function testModificarUnGrupo1()
    {
        // Parameters for the API call
        $token = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE1MTU2NzUxNTJ9.94eDQR7Rn8sUblFCaGzoEC1XxbS8XGYtFhgGzslrzKU';
        $body = TestHelper::getJsonMapper()->mapClass(json_decode(
            '\n{\n\n    "nombre": "Informática",\n\n    "aplicacion": "iris2",\n\n    "usuarios": [\n\n        "J' .
            'UANDE.MC",\n\n        "SCORDOBA"\n\n    ]\n\n}'),
            'APIBuzonesLib\\Models\\ModificarUnGrupoRequest'
        );
        $contentType = 'application/json';

        // Set callback and perform API call
        $result = null;
        self::$controller->setHttpCallBack($this->httpResponse);
        try {
            $result = self::$controller->updateGroups5a564715825d4f0e94946c1aPatch($token, $body, $contentType);
        } catch (APIException $e) {
        }

        // Test response code
        $this->assertEquals(
            200,
            $this->httpResponse->getResponse()->getStatusCode(),
            "Status is not 200"
        );

        // Test whether the captured response is as we expected
        $this->assertNotNull($result, "Result does not exist");

        $this->assertEquals(
            '\n{\n\n    "data": {\n\n        "id": "123456",\n\n        "leido": true,\n\n        "borrado": fals' .
                'e,\n\n        "fecha": "2017-10-20T15:59:45.000Z",\n\n        "data": {\n\n            "type": "inci' .
                'dencias_pregunta",\n\n            "referencia": "123456789"\n\n        }\n\n    }\n\n}',
            $this->httpResponse->getResponse()->getRawBody(),
            "Response body does not match exactly"
        );
    }

    /**
     * 
Devuelve todos los grupos de la aplicación. Acepta parametros en la url:


skip: se salta ese número de documentos


limit: número documentos máximo que devolverá
     */
    public function testLeerGruposDeUnaAplicacion1()
    {
        // Parameters for the API call
        $borrado = false;
        $fecha = DateTimeHelper::fromRfc3339DateTime('2017-11-15');
        $limit = 20;
        $skip = 0;
        $token = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE1MTU2NzUxNTJ9.94eDQR7Rn8sUblFCaGzoEC1XxbS8XGYtFhgGzslrzKU';
        $contentType = 'application/json';

        // Set callback and perform API call
        $result = null;
        self::$controller->setHttpCallBack($this->httpResponse);
        try {
            $result = self::$controller->getGroupsApplicationsIris2Get($borrado, $fecha, $limit, $skip, $token, $contentType);
        } catch (APIException $e) {
        }

        // Test response code
        $this->assertEquals(
            200,
            $this->httpResponse->getResponse()->getStatusCode(),
            "Status is not 200"
        );

        // Test whether the captured response is as we expected
        $this->assertNotNull($result, "Result does not exist");

        $this->assertEquals(
            '\n{\n\n    "data": [\n\n        {\n\n            "id": "123456",\n\n            "leido": false,\n\n ' .
                '           "borrado": false,\n\n            "fecha": "2017-10-20T15:59:45.000Z",\n\n            "dat' .
                'a": {\n\n                "type": "incidencias_pregunta",\n\n                "referencia": "123456789' .
                '"\n\n            }\n\n        },\n\n        {\n\n            "id": "123457",\n\n            "leido":' .
                ' false,\n\n            "borrado": false,\n\n            "fecha": "2017-10-20T16:59:45.000Z",\n\n    ' .
                '        "data": {\n\n                "type": "incidencias_pregunta",\n\n                "referencia"' .
                ': "123456789"\n\n            }\n\n        }\n\n    ]\n\n}',
            $this->httpResponse->getResponse()->getRawBody(),
            "Response body does not match exactly"
        );
    }

    /**
     * Devuelve el grupo (123456).
     */
    public function testLeerUnGrupo1()
    {
        // Parameters for the API call
        $token = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE1MTU2NzUxNTJ9.94eDQR7Rn8sUblFCaGzoEC1XxbS8XGYtFhgGzslrzKU';

        // Set callback and perform API call
        $result = null;
        self::$controller->setHttpCallBack($this->httpResponse);
        try {
            $result = self::$controller->getGroups5a564715825d4f0e94946c1aGet($token);
        } catch (APIException $e) {
        }

        // Test response code
        $this->assertEquals(
            200,
            $this->httpResponse->getResponse()->getStatusCode(),
            "Status is not 200"
        );

        // Test whether the captured response is as we expected
        $this->assertNotNull($result, "Result does not exist");

        $this->assertEquals(
            '\n{\n\n    "data":{\n\n        "id": "123456",\n\n    "leido": false,\n\n    "borrado": false,\n\n  ' .
                '  "fecha": "2017-10-20T15:59:45.000Z",\n\n    "data": {\n\n        "type": "incidencias_pregunta",\n' .
                '\n        "referencia": "123456789"\n\n    }\n\n    }\n\n}',
            $this->httpResponse->getResponse()->getRawBody(),
            "Response body does not match exactly"
        );
    }

    /**
     * Crea un nuevo grupo.
     */
    public function testCrearUnGrupo1()
    {
        // Parameters for the API call
        $token = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE1MTc5Mzk5NDd9.-pLDemUYmYPpjG5CZ7VI7UUBcC8mC_KAbEyNpzHsTMw';
        $body = TestHelper::getJsonMapper()->mapClass(json_decode(
            '\n{\n\n    "nombre": "Informática",\n\n    "aplicacion": "iris2",\n\n    "usuarios":["JUANDE.MC", "S' .
            'CORDOBA"]\n\n}'),
            'APIBuzonesLib\\Models\\CrearUnGrupoRequest'
        );
        $contentType = 'application/json';

        // Set callback and perform API call
        $result = null;
        self::$controller->setHttpCallBack($this->httpResponse);
        try {
            $result = self::$controller->createGroupsPost($token, $body, $contentType);
        } catch (APIException $e) {
        }

        // Test response code
        $this->assertEquals(
            200,
            $this->httpResponse->getResponse()->getStatusCode(),
            "Status is not 200"
        );

        // Test whether the captured response is as we expected
        $this->assertNotNull($result, "Result does not exist");

        $this->assertEquals(
            '\n{\n\n\n"data":\n\n        {\n\n            "id": "123456",\n\n            "leido": false,\n\n     ' .
                '       "borrado": false,\n\n            "fecha": "2017-10-20T15:59:45.000Z",\n\n            "data": ' .
                '{\n\n                "type": "incidencias_pregunta",\n\n                "referencia": "123456789"\n\' .
                'n            }\n\n        }\n\n}\n',
            $this->httpResponse->getResponse()->getRawBody(),
            "Response body does not match exactly"
        );
    }

    /**
     * 
Devuelve todos los grupos. Acepta parametros en la url:


skip: se salta ese número de documentos


limit: número documentos máximo que devolverá
     */
    public function testLeerGrupos1()
    {
        // Parameters for the API call
        $borrado = false;
        $fecha = DateTimeHelper::fromRfc3339DateTime('2017-11-15');
        $limit = 20;
        $skip = 0;
        $token = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE1MTU2NzUxNTJ9.94eDQR7Rn8sUblFCaGzoEC1XxbS8XGYtFhgGzslrzKU';
        $contentType = 'application/json';

        // Set callback and perform API call
        $result = null;
        self::$controller->setHttpCallBack($this->httpResponse);
        try {
            $result = self::$controller->getGroupsGet($borrado, $fecha, $limit, $skip, $token, $contentType);
        } catch (APIException $e) {
        }

        // Test response code
        $this->assertEquals(
            200,
            $this->httpResponse->getResponse()->getStatusCode(),
            "Status is not 200"
        );

        // Test whether the captured response is as we expected
        $this->assertNotNull($result, "Result does not exist");

        $this->assertEquals(
            '\n{\n\n    "data": [\n\n        {\n\n            "id": "123456",\n\n            "leido": false,\n\n ' .
                '           "borrado": false,\n\n            "fecha": "2017-10-20T15:59:45.000Z",\n\n            "dat' .
                'a": {\n\n                "type": "incidencias_pregunta",\n\n                "referencia": "123456789' .
                '"\n\n            }\n\n        },\n\n        {\n\n            "id": "123457",\n\n            "leido":' .
                ' false,\n\n            "borrado": false,\n\n            "fecha": "2017-10-20T16:59:45.000Z",\n\n    ' .
                '        "data": {\n\n                "type": "incidencias_pregunta",\n\n                "referencia"' .
                ': "123456789"\n\n            }\n\n        }\n\n    ]\n\n}',
            $this->httpResponse->getResponse()->getRawBody(),
            "Response body does not match exactly"
        );
    }
}
